(function (window, document) {
    'use strict';

    function AudioInterface (engine) {
        var doc = document;
        this.osc1 = doc.getElementById('osc-1');
        this.osc2 = doc.getElementById('osc-2');
        this.osc1Detune = doc.getElementById('osc-1-detune');
        this.osc2Detune = doc.getElementById('osc-2-detune');
        this.osc1DetuneOutput = doc.getElementById('osc-1-detune-output');
        this.osc2DetuneOutput = doc.getElementById('osc-2-detune-output');
        this.filterType = doc.getElementById('filter-type');
        this.filterFreq = doc.getElementById('filter-freq');
        this.filterQuality = doc.getElementById('filter-q');
        this.filterFreqOutput = doc.getElementById('filter-freq-output');
        this.filterQualityOutput = doc.getElementById('filter-q-output');
        this.envAttack = doc.getElementById('env-attack');
        this.envRelease = doc.getElementById('env-release');
        this.envAttackOutput = doc.getElementById('env-attack-output');
        this.envReleaseOutput = doc.getElementById('env-release-output');
        this.keyboard = doc.getElementById('keyboard');
        this.synthId = doc.getElementById('synth-id');

        if (!engine || !engine instanceof AudioEngine) {
            throw new Error('AudioInterface() first arg must be instance of AudioEngine');
        }

        this.engine = engine;

        this.noteDown = false;
        this.currentNote = null;

        this.osc = this.engine.getSource();

        this.options = {
            osc1Wave: this.osc1.options[this.osc1.selectedIndex].value,
            osc2Wave: this.osc2.options[this.osc2.selectedIndex].value,
            osc1Detune: this.osc1Detune.value,
            osc2Detune: this.osc2Detune.value,
            filterType: this.filterType.options[this.filterType.selectedIndex].value,
            filterFreq: this.filterFreq.value,
            filterQuality: this.filterQuality.value,
            envAttack: this.envAttack.value,
            envRelease: this.envRelease.value
        };

        this.engine.loadPreset(this.options);

        this.setOutputDefaults();
        this.bindEvents();
    }

    AudioInterface.prototype.setOutputDefaults = function () {
        this.filterFreqOutput.innerHTML = this.options.filterFreq;
        this.filterQualityOutput.innerHTML = this.options.filterQuality;
        this.osc1DetuneOutput.innerHTML = this.options.osc1Detune;
        this.osc2DetuneOutput.innerHTML = this.options.osc2Detune;
        this.envAttackOutput.innerHTML = this.options.envAttack;
        this.envReleaseOutput.innerHTML = this.options.envRelease;
    };

    AudioInterface.prototype.bindEvents = function () {
        this.keyboard.addEventListener('mousedown', this.keyDown.bind(this), false);
        this.keyboard.addEventListener('mouseup', this.keyUp.bind(this), false);
        this.keyboard.addEventListener('mouseleave', this.keyUp.bind(this), false);

        this.filterFreq.addEventListener('input', this.onFilterFreqChange.bind(this), false);
        this.filterQuality.addEventListener('input', this.onFilterQualityChange.bind(this), false);
        this.filterType.addEventListener('change', this.onFilterTypeChange.bind(this), false);

        this.osc1.addEventListener('change', this.onOsc1WaveChange.bind(this), false);
        this.osc2.addEventListener('change', this.onOsc2WaveChange.bind(this), false);
        this.osc1Detune.addEventListener('input', this.onOsc1DetuneChange.bind(this), false);
        this.osc2Detune.addEventListener('input', this.onOsc2DetuneChange.bind(this), false);

        this.envAttack.addEventListener('input', this.onEnvAttackChange.bind(this), false);
        this.envRelease.addEventListener('input', this.onEnvReleaseChange.bind(this), false);
    };

    AudioInterface.prototype.onFilterTypeChange = function (e) {
        this.engine.setFilterType(e.target.value);
    };

    AudioInterface.prototype.onFilterFreqChange = function (e) {
        this.engine.setFilterFreq(e.target.value);
        this.filterFreqOutput.innerHTML = e.target.value;
    };

    AudioInterface.prototype.onFilterQualityChange = function (e) {
        this.engine.setFilterQuality(e.target.value);
        this.filterQualityOutput.innerHTML = e.target.value;
    };

    AudioInterface.prototype.onOsc1WaveChange = function (e) {
        this.osc.setOscWave({
            wave1: e.target.value
        });
    };

    AudioInterface.prototype.onOsc2WaveChange = function (e) {
        this.osc.setOscWave({
            wave2: e.target.value
        });
    };

    AudioInterface.prototype.onOsc1DetuneChange = function (e) {
        this.osc.setOscDetune({
            osc1: e.target.value
        });
        this.osc1DetuneOutput.innerHTML = e.target.value;
    };

    AudioInterface.prototype.onOsc2DetuneChange = function (e) {
        this.osc.setOscDetune({
            osc2: e.target.value
        });
        this.osc2DetuneOutput.innerHTML = e.target.value;
    };

    AudioInterface.prototype.onEnvAttackChange = function (e) {
        this.engine.setEnvAttack(e.target.value);
        this.envAttackOutput.innerHTML = e.target.value;
    };

    AudioInterface.prototype.onEnvReleaseChange = function (e) {
        this.engine.setEnvRelease(e.target.value);
        this.envReleaseOutput.innerHTML = e.target.value;
    };

    AudioInterface.prototype.updateFilter = function () {
        var freq = this.engine.getFilterFreq();
        var q = this.engine.getFilterQuality();
        this.filterFreq.value = freq;
        this.filterFreqOutput.innerHTML = freq;
        this.filterQuality.value = q;
        this.filterQualityOutput.innerHTML = q;
    };

    AudioInterface.prototype.keyDown = function (e) {
        var key = document.elementFromPoint(e.clientX, e.clientY);
        var freq = this.engine.getFreqFromNote(key.getAttribute('data-id'));
        e.preventDefault();
        this.noteDown = true;
        this.currentNote = freq;
        this.osc.setFreq(freq);
        this.engine.noteStart();
        this.keyboard.addEventListener('mousemove', this.keyMove.bind(this), false);
        key.classList.add('pressed');
    };

    AudioInterface.prototype.keyMove = function (e) {
        var doc = document;
        var key = doc.elementFromPoint(e.clientX, e.clientY);
        var freq = this.engine.getFreqFromNote(key.getAttribute('data-id'));
        e.preventDefault();
        if (this.noteDown && this.currentNote !== freq) {
            this.osc.setFreq(freq);
            this.engine.noteMove(1);
            this.currentNote = freq;
            doc.querySelector('#keyboard .pressed').classList.remove('pressed');
            key.classList.add('pressed');
        }
    };

    AudioInterface.prototype.keyUp = function (e) {
        var doc = document;
        var key = doc.elementFromPoint(e.clientX, e.clientY);
        e.preventDefault();
        if (this.noteDown) {
            this.engine.noteEnd();
            this.keyboard.removeEventListener('mousemove', this.keyMove.bind(this), false);
            this.noteDown = false;
            this.currentNote = null;
            doc.querySelector('#keyboard .pressed').classList.remove('pressed');
        }
    };

    window.AudioInterface = AudioInterface;

}(window, document));
;(function (window, document) {
    'use strict';

    function DualOscillator (ctx) {
        this.osc1 = ctx.createOscillator();
        this.osc2 = ctx.createOscillator();
    }

    DualOscillator.prototype.connect = function (output) {
        this.osc1.connect(output);
        this.osc2.connect(output);
    };

    DualOscillator.prototype.setFreq = function (freq) {
        var f = parseFloat(freq);
        this.osc1.frequency.value = f;
        this.osc2.frequency.value = f;
    };

    DualOscillator.prototype.setOscWave = function (options) {
        if (options.wave1) {
            this.osc1.type = options.wave1;
        }
        if (options.wave2) {
            this.osc2.type = options.wave2;
        }
    };

    DualOscillator.prototype.setOscDetune = function (options) {
        if (options.osc1) {
            this.osc1.detune.value = options.osc1;
        }
        if (options.osc2) {
            this.osc2.detune.value = options.osc2;
        }
    };

    DualOscillator.prototype.start = function (time) {
        this.osc1.start(time);
        this.osc2.start(time);
    };

    DualOscillator.prototype.stop = function (time) {
        this.osc1.stop(time);
        this.osc2.stop(time);
    };

    window.DualOscillator = DualOscillator;

}(window, document));
;(function (window, document) {
    'use strict';
    /*
     * AudioEngine constructor
     * Creates an AudioContext & routes components
     */
    function AudioEngine () {
        this.ctx = new AudioContext();
        this.nodes = {};
        this.options = {
            osc1Wave: 'sine',
            osc2Wave: 'sine',
            osc1Detune: 0,
            osc2Detune: 0,
            filterType: 'lowpass',
            filterFreq: 12000,
            filterQuality: 1,
            attack: 0,
            release: 0,
            remoteWidth: null,
            remoteHeight: null

        };

        this.initComponents();
        this.routeComponents();
    }

    /*
     * Creates audio nodes
     */
    AudioEngine.prototype.initComponents = function () {
        this.nodes.osc = new DualOscillator(this.ctx);
        this.nodes.oscGain = this.ctx.createGain();
        this.nodes.oscGain.gain.value = 0;
        this.nodes.filter = this.ctx.createBiquadFilter();
        this.nodes.masterComp = this.ctx.createDynamicsCompressor();
        this.nodes.masterGain = this.ctx.createGain();
        this.nodes.masterGain.gain.value = 0.9;
    };

    /*
     * Routes audio nodes starting with source (oscillator)
     * and finishing with destinations (speakers)
     */
    AudioEngine.prototype.routeComponents = function (out) {
        this.nodes.osc.connect(this.nodes.filter);
        this.nodes.filter.connect(this.nodes.oscGain);
        this.nodes.oscGain.connect(this.nodes.masterComp);
        this.nodes.masterComp.connect(this.nodes.masterGain);
        this.nodes.masterGain.connect(this.ctx.destination);
        this.nodes.osc.start(0);
    };

    /*
     * Set the source frequency and gain value on key down
     */
    AudioEngine.prototype.noteStart = function (vel) {
        var now = this.ctx.currentTime;
        this.nodes.oscGain.gain.cancelScheduledValues(now);
        this.nodes.oscGain.gain.setValueAtTime(0, now);
        this.nodes.oscGain.gain.linearRampToValueAtTime(1, now + this.options.attack);
    };

    /*
     * Set the source frequency and gain value on key move
     */
    AudioEngine.prototype.noteMove = function (val) {
        this.nodes.oscGain.gain.value = val;
    };

    /*
     * Mute the source gain value on key up
     */
    AudioEngine.prototype.noteEnd = function () {
        var now = this.ctx.currentTime;
        this.nodes.oscGain.gain.cancelScheduledValues(now);
        this.nodes.oscGain.gain.setValueAtTime(this.nodes.oscGain.gain.value, now);
        this.nodes.oscGain.gain.linearRampToValueAtTime(0, now + this.options.release);
    };

    /*
     * Get the filter frequency and q values based on touch coordinates
     * @param x (number), y (number)
     */
    AudioEngine.prototype.getFilterValuesFromTouch = function (x, y) {
        var freq = 12000 - (parseInt(y, 10) * (12000 / this.options.remoteHeight));
        var q = 10 - (this.options.remoteWidth - parseInt(x, 10)) / this.options.remoteWidth * 10;
        freq = Math.min(freq, 12000);
        freq = Math.max(40, freq);
        q = Math.min(q, 10);
        q = Math.max(1, q);
        this.setFilterQuality(Math.round(q));
        this.setFilterFreq(Math.round(freq));
    };

    /*
     * Returns the oscillator frequency for a given piano key number
     * @param note (number)
     * @return frequency (number)
     */
    AudioEngine.prototype.getFreqFromNote = function (note) {
        return 440 * Math.pow(2, (note - 49) / 12);
    };

    AudioEngine.prototype.getFilterType = function (type) {
        return this.nodes.filter.type;
    };

    AudioEngine.prototype.setFilterType = function (type) {
        this.nodes.filter.type = type;
    };

    AudioEngine.prototype.setFilterFreq = function (freq) {
        this.nodes.filter.frequency.value = freq;
    };

    AudioEngine.prototype.getFilterFreq = function () {
        return this.nodes.filter.frequency.value;
    };

    AudioEngine.prototype.getFilterQuality = function () {
        return this.nodes.filter.Q.value;
    };

    AudioEngine.prototype.setFilterQuality = function (q) {
        this.nodes.filter.Q.value = q;
    };

    AudioEngine.prototype.setEnvAttack = function (time) {
        this.options.attack = parseFloat(time);
    };

    AudioEngine.prototype.setEnvRelease = function (time) {
        this.options.release = parseFloat(time);
    };

    /*
     * Generic method for setting options that aren't directly
     * tied to a sound preset, such as remote client size.
     * @param options (object)
     */
    AudioEngine.prototype.setOptions = function (options) {
        if (typeof options === 'object') {
            for (var i in options) {
                if (options.hasOwnProperty(i)) {
                    this.options[i] = options[i];
                }
            }
        }
    };

    /*
     * Loads a set of synth engine preset values
     * @param options (object)
     */
    AudioEngine.prototype.loadPreset = function (options) {
        if (typeof options === 'object') {
            for (var i in options) {
                if (options.hasOwnProperty(i)) {
                    this.options[i] = options[i];
                }
            }

            this.nodes.osc.setOscWave({
                wave1: this.options.osc1Wave,
                wave2: this.options.osc2Wave
            });
            this.nodes.osc.setOscDetune({
                osc1: this.options.osc1Detune,
                osc2: this.options.osc2Detune
            });

            this.setFilterType(this.options.filterType);
            this.setFilterFreq(this.options.filterFreq);
            this.setFilterQuality(this.options.filterQuality);
            this.setEnvAttack(this.options.envAttack);
            this.setEnvRelease(this.options.envRelease);
        }
    };

    /*
     * Returns a reference to the source oscillator node
     */
    AudioEngine.prototype.getSource = function () {
        return this.nodes.osc;
    };

    window.AudioEngine = AudioEngine;

}(window, document));
;(function (window, document) {
    'use strict';

    /*
     * Get the party started
     */
    function init () {
        var socket = io();
        var engine = new AudioEngine();
        var ui = new AudioInterface(engine);

        socket.on('connect', function () {
            var id = document.getElementById('synth-id').innerHTML;
            socket.emit('room', id);

            socket.on('filterStart', function (data) {
                engine.getFilterValuesFromTouch(data.x, data.y);
                ui.updateFilter();
            });

            socket.on('filterMove', function (data) {
                engine.getFilterValuesFromTouch(data.x, data.y);
                ui.updateFilter();
            });

            socket.on('clientSize', function (data) {
                engine.setOptions(data);
            });

            socket.on('disconnect', function () {
                //console.log('disconnected');
            });
        });
    }

    window.addEventListener('DOMContentLoaded', init, false);

}(window, document));
